using System;
using System.Collections.Generic;

namespace Cofoundry.Domain.Data
{
    /// <summary>
    /// Pages are a versioned entity and therefore have many page version
    /// records. At one time a page may only have one draft version, but
    /// can have many published versions; the latest published version is
    /// the one that is rendered when the page is published. 
    /// </summary>
    public partial class PageVersion : ICreateAuditable, IEntityVersion
    {
        public PageVersion()
        {
            PageVersionBlocks = new List<PageVersionBlock>();
            ChildPageVersions = new List<PageVersion>();
            PagePublishStatusQueries = new List<PagePublishStatusQuery>();
        }

        /// <summary>
        /// Primary key of the page version.
        /// </summary>
        public int PageVersionId { get; set; }

        /// <summary>
        /// Id of the page this version is parented to.
        /// </summary>
        public int PageId { get; set; }

        /// <summary>
        /// Id of the template used to render this version.
        /// </summary>
        public int PageTemplateId { get; set; }

        /// <summary>
        /// Used to track the version that this instance was based on.
        /// Not currently used, and could be dropped in a future 
        /// verison as it doesn't appear to be that useful.
        /// </summary>
        public int? BasedOnPageVersionId { get; set; }

        /// <summary>
        /// The descriptive human-readable title of page that is often 
        /// used in the html page title meta tag. Does not have to be
        /// unique.
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// The description of the content of the page. This is intended to
        /// be used in the description html meta tag.
        /// </summary>
        public string MetaDescription { get; set; }

        /// <summary>
        /// MApped from the domain enum WorkFlowStatus, this is the workflow 
        /// state of this version e.g. draft/published.
        /// </summary>
        public int WorkFlowStatusId { get; set; }

        /// <summary>
        /// Versions are currently able to be soft-deleted but this will likely
        /// be removed at a later date and replaced by a system that doesn't keep
        /// data hanging around in production tables.
        /// </summary>
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Indicates whether the page should show in the autogenerated site map
        /// that gets presented to search engine robots.
        /// </summary>
        public bool ExcludeFromSitemap { get; set; }

        public string OpenGraphTitle { get; set; }
        public string OpenGraphDescription { get; set; }
        public int? OpenGraphImageId { get; set; }

        public ImageAsset OpenGraphImageAsset { get; set; }

        /// <summary>
        /// The template used to render this version.
        /// </summary>
        public PageTemplate PageTemplate { get; set; }

        /// <summary>
        /// Page content data to be rendered in the page template.
        /// </summary>
        public ICollection<PageVersionBlock> PageVersionBlocks { get; set; }

        /// <summary>
        /// The page this version is parented to.
        /// </summary>
        public Page Page { get; set; }

        /// <summary>
        /// Navigation property based on the BasedOnPageVersionId property
        /// which may be removed at some point.
        /// </summary>
        public ICollection<PageVersion> ChildPageVersions { get; set; }

        /// <summary>
        /// Navigation property based on the BasedOnPageVersionId property
        /// which may be removed at some point.
        /// </summary>
        public PageVersion BasedOnPageVersion { get; set; }

        /// <summary>
        /// Lookup cache used for quickly finding the correct version for a
        /// specific publish status query e.g. 'Latest', 'Published', 'PreferPublished'
        /// </summary>
        public ICollection<PagePublishStatusQuery> PagePublishStatusQueries { get; set; }

        #region ICreateAuditable

        public DateTime CreateDate { get; set; }

        public int CreatorId { get; set; }

        public virtual User Creator { get; set; }

        #endregion
    }
}
