angular.module("cms.roles", ["ngRoute", "cms.shared"]).constant("_", window._).constant("roles.modulePath", "/admin/modules/roles/js/"); angular.module("cms.roles").config(["$routeProvider", "shared.routingUtilities", "roles.modulePath", function (n, t, i) { t.registerCrudRoutes(n, i, "Role") }]); angular.module("cms.roles").controller("AddRoleController", ["$location", "shared.LoadState", "roles.permissionService", "roles.roleService", "roles.userAreaService", function (n, t, i, r, u) { function o() { f.globalLoadState = new t; f.formLoadState = new t(!0); c(); l(); f.editMode = !1; f.save = s; f.cancel = h } function s() { f.globalLoadState.on(); r.add(f.command).then(e).finally(f.globalLoadState.off) } function h() { e() } function e() { n.path("/") } function c() { function n(n) { f.userAreas = n; n.length == 1 && (f.command.userAreaCode = n[0].userAreaCode); f.formLoadState.off() } u.getAll().then(n) } function l() { f.command = { permissions: [] } } var f = this; o() }]); angular.module("cms.roles").controller("RoleDetailsController", ["$routeParams", "$location", "$q", "shared.LoadState", "shared.modalDialogService", "roles.roleService", "roles.permissionService", "roles.modulePath", function (n, t, i, r, u, f) { function l() { e.edit = a; e.save = v; e.cancel = y; e.deleteRole = p; e.editMode = !1; e.globalLoadState = new r; e.saveLoadState = new r; e.formLoadState = new r(!0); s().then(o.bind(null, e.formLoadState)) } function a() { e.editMode = !0; e.mainForm.formStatus.clear() } function v() { c(e.saveLoadState); f.update(e.command).then(w.bind(null, "Changes were saved successfully")).finally(o.bind(null, e.saveLoadState)) } function y() { e.editMode = !1; e.command = h(e.role); e.mainForm.formStatus.clear() } function p() { function t() { return c(), f.remove(e.role.roleId).then(b).catch(o) } var n = { title: "Delete Role", message: "Are you sure you want to delete this role?", okButtonTitle: "Yes, delete it", onOk: t }; u.confirm(n) } function w(n) { return s().then(e.mainForm.formStatus.success.bind(null, n)) } function s() { function i(n) { e.role = n; e.command = h(n); e.editMode = !1; console.log(n) } var t = n.id; return f.getById(t).then(i) } function h(n) { var t = _.pick(n, "roleId", "title"); return t.permissions = _.map(n.permissions, function (n) { var t = { permissionCode: n.permissionType.code }; return n.entityDefinition && (t.entityDefinitionCode = n.entityDefinition.entityDefinitionCode), t }), t } function b() { t.path("") } function c(n) { e.globalLoadState.on(); n && _.isFunction(n.on) && n.on() } function o(n) { e.globalLoadState.off(); n && _.isFunction(n.off) && n.off() } var e = this; l() }]); angular.module("cms.roles").controller("RoleListController", ["_", "shared.LoadState", "shared.SearchQuery", "shared.urlLibrary", "roles.roleService", function (n, t, i, r, u) { function s() { f.urlLibrary = r; f.gridLoadState = new t; f.query = new i({ onChanged: h }); f.filter = f.query.getFilters(); f.toggleFilter = e; e(!1); o() } function e(t) { f.isFilterVisible = n.isUndefined(t) ? !f.isFilterVisible : t } function h() { e(!1); o() } function o() { return f.gridLoadState.on(), u.getAll(f.query.getParameters()).then(function (n) { f.result = n; f.gridLoadState.off() }) } var f = this; s() }]); angular.module("cms.roles").factory("roles.permissionService", ["$http", "shared.serviceBase", function (n, t) { var i = {}, r = t + "permissions"; return i.getAll = function () { return n.get(r) }, i }]); angular.module("cms.roles").factory("roles.roleService", ["$http", "_", "shared.serviceBase", function (n, t, i) { function f(n) { return u + "/" + n } var r = {}, e = "COF", u = i + "roles"; return r.getAll = function (i) { return i = t.defaults(i, { userAreaCode: e }), n.get(u, { params: i }) }, r.getById = function (t) { return n.get(f(t)) }, r.add = function (t) { return n.post(u, t) }, r.update = function (t) { return n.patch(f(t.roleId), t) }, r.remove = function (t) { return n.delete(f(t)) }, r }]); angular.module("cms.roles").factory("roles.userAreaService", ["$http", "_", "shared.serviceBase", function (n, t, i) { var r = {}; return r.getAll = function () { return n.get(i + "user-areas") }, r }]); angular.module("cms.shared").directive("cmsFormFieldPermissionsCollection", ["_", "shared.LoadState", "roles.modulePath", "roles.permissionService", function (n, t, i, r) { function f(i, f, e, o) { function y(t, i) { var r = t.target; n.each(i.permissions, function (n) { n.selected = !!r.checked; h(n, i, !0) }); c() } function h(t, i, r) { t.permissionType.code === u && (i.isReadPermitted = t.selected, t.selected || n.each(i.permissions, function (n) { n.selected = !1 })); r || c() } function c() { var t = []; n.each(s.permissions, function (n) { var i; n.selected && (i = { permissionCode: n.permissionType.code }, n.entityDefinition && (i.entityDefinitionCode = n.entityDefinition.entityDefinitionCode), t.push(i)) }); s.model = t } function l() { if (s.permissionGroups && s.permissionGroups.length) { var t = !!(s.model && s.model.length); n.each(s.permissionGroups, function (i) { n.each(i.permissions, function (r) { r.selected = t && !!n.find(s.model, function (n) { return r.uniqueId === a(n.permissionCode, n.entityDefinitionCode) }); h(r, i, !0) }) }) } } function a(n, t) { var i = "permission" + n; return t && (i += t), i } function p() { function t(t) { t && (s.permissions = t, s.permissionGroups = n.chain(s.permissions).groupBy(function (n) { return n.entityDefinition ? n.entityDefinition.name : "Misc" }).map(function (n, t) { var r = i(n); return { title: t, isReadPermitted: !r || r.selected, permissions: f(n) } }).sortBy("title").value(), l()); s.permissionsLoadState.off() } function i(t) { return n.find(t, function (n) { return n.permissionType.code === u }) } function f(t) { return n.sortBy(t, function (n) { var t = n.permissionType; n.uniqueId = a(n.permissionType.code, n.entityDefinition ? n.entityDefinition.entityDefinitionCode : ""); switch (t.code) { case "COMRED": return n.isRead = !0, "AAAA1"; case "COMMOD": return "AAAA2"; case "COMCRT": return "AAAA3"; case "COMUPD": return "AAAA4"; case "COMDEL": return "AAAA5"; default: return t.name }return n.permissionType.code }) } return r.getAll().then(t) } var s = i, v = o[0]; i.$watch("model", function () { l() }); p(); s.formScope = v.getFormScope(); s.permissionsLoadState = new t(!0); s.toggleGroup = y; s.permissionChanged = h } var u = "COMRED"; return { restrict: "E", scope: { model: "=cmsModel", globalLoadState: "=cmsGlobalLoadState" }, templateUrl: i + "UIComponents/FormFieldPermissionsCollection.html", require: ["^^cmsForm"], link: f } }])