angular.module("cms.roles",["ngRoute","cms.shared"]).constant("_",window._).constant("roles.modulePath","/Admin/Modules/Roles/Js/"),angular.module("cms.roles").config(["$routeProvider","shared.routingUtilities","roles.modulePath",function(e,n,t){n.registerCrudRoutes(e,t,"Role")}]),angular.module("cms.roles").factory("roles.permissionService",["$http","shared.serviceBase",function(n,e){var t={},o=e+"permissions";return t.getAll=function(e){return n.get(o)},t}]),angular.module("cms.roles").factory("roles.roleService",["$http","_","shared.serviceBase",function(n,e,t){var o={},i=t+"roles";function r(e){return i+"/"+e}return o.getAll=function(e){return n.get(i,{params:e})},o.getById=function(e){return n.get(r(e))},o.add=function(e){return n.post(i,e)},o.update=function(e){return n.patch(r(e.roleId),e)},o.remove=function(e){return n.delete(r(e))},o}]),angular.module("cms.roles").factory("roles.userAreaService",["$http","_","shared.serviceBase",function(e,n,t){var o={getAll:function(){return e.get(t+"user-areas")}};return o}]),angular.module("cms.shared").directive("cmsFormFieldPermissionsCollection",["_","shared.LoadState","roles.modulePath","roles.permissionService",function(c,u,e,d){var m="COMRED";return{restrict:"E",scope:{model:"=cmsModel",globalLoadState:"=cmsGlobalLoadState"},templateUrl:e+"UIComponents/FormFieldPermissionsCollection.html",require:["^^cmsForm"],link:function(e,n,t,o){var i=e,o=o[0];function r(e,n,t){e.permissionType.code===m&&(n.isReadPermitted=e.selected,e.selected||c.each(n.permissions,function(e){e.selected=!1})),t||s()}function s(){var t=[];c.each(i.permissions,function(e){var n;e.selected&&(n={permissionCode:e.permissionType.code},e.entityDefinition&&(n.entityDefinitionCode=e.entityDefinition.entityDefinitionCode),t.push(n))}),i.model=t}function a(){var t;i.permissionGroups&&i.permissionGroups.length&&(t=!(!i.model||!i.model.length),c.each(i.permissionGroups,function(e){c.each(e.permissions,function(n){n.selected=t&&!!c.find(i.model,function(e){return n.uniqueId===l(e.permissionCode,e.entityDefinitionCode)}),r(n,e,!0)})}))}function l(e,n){e="permission"+e;return n&&(e+=n),e}e.$watch("model",function(e,n){a()}),d.getAll().then(function(e){e&&(i.permissions=e,i.permissionGroups=c.chain(i.permissions).groupBy(function(e){return e.entityDefinition?e.entityDefinition.name:"Misc"}).map(function(e,n){var t,t=(t=e,c.find(t,function(e){return e.permissionType.code===m}));return{title:n,isReadPermitted:!t||t.selected,permissions:(e=e,c.sortBy(e,function(e){var n=e.permissionType;switch(e.uniqueId=l(e.permissionType.code,e.entityDefinition?e.entityDefinition.entityDefinitionCode:""),n.code){case"COMRED":return e.isRead=!0,"AAAA1";case"COMMOD":return"AAAA2";case"COMCRT":return"AAAA3";case"COMUPD":return"AAAA4";case"COMDEL":return"AAAA5";default:return n.name}return e.permissionType.code}))}}).sortBy("title").value(),a());i.permissionsLoadState.off()}),i.formScope=o.getFormScope(),i.permissionsLoadState=new u(!0),i.toggleGroup=function(e,n){var t=e.target;c.each(n.permissions,function(e){e.selected=!!t.checked,r(e,n,!0)}),s()},i.permissionChanged=r}}}]),angular.module("cms.roles").controller("AddRoleController",["$location","shared.LoadState","roles.permissionService","roles.roleService","roles.userAreaService",function(e,n,t,o,i){var r=this;function s(){r.globalLoadState.on(),o.add(r.command).then(l).finally(r.globalLoadState.off)}function a(){l()}function l(){e.path("/")}r.globalLoadState=new n,r.formLoadState=new n(!0),i.getAll().then(function(e){1==(r.userAreas=e).length&&(r.command.userAreaCode=e[0].userAreaCode),r.formLoadState.off()}),r.command={permissions:[]},r.editMode=!1,r.save=s,r.cancel=a}]),angular.module("cms.roles").controller("RoleDetailsController",["$routeParams","$location","$q","shared.LoadState","shared.modalDialogService","shared.permissionValidationService","roles.roleService","roles.permissionService","roles.modulePath",function(n,e,t,o,i,r,s,a,l){var c=this;function u(){c.editMode=!0,c.mainForm.formStatus.clear()}function d(){v(c.saveLoadState),s.update(c.command).then(function(e){return p().then(c.mainForm.formStatus.success.bind(null,e))}.bind(null,"Changes were saved successfully")).finally(S.bind(null,c.saveLoadState))}function m(){c.editMode=!1,c.command=h(c.role),c.mainForm.formStatus.clear()}function f(){var e={title:"Delete Role",message:"Are you sure you want to delete this role?",okButtonTitle:"Yes, delete it",onOk:function(){return v(),s.remove(c.role.roleId).then(g).catch(S)}};i.confirm(e)}function p(){var e=n.id;return s.getById(e).then(function(e){c.role=e,c.command=h(e),c.editMode=!1})}function h(e){var n=_.pick(e,"roleId","title");return n.permissions=_.map(e.permissions,function(e){var n={permissionCode:e.permissionType.code};return e.entityDefinition&&(n.entityDefinitionCode=e.entityDefinition.entityDefinitionCode),n}),n}function g(){e.path("")}function v(e){c.globalLoadState.on(),e&&_.isFunction(e.on)&&e.on()}function S(e){c.globalLoadState.off(),e&&_.isFunction(e.off)&&e.off()}c.edit=u,c.save=d,c.cancel=m,c.deleteRole=f,c.editMode=!1,c.globalLoadState=new o,c.saveLoadState=new o,c.formLoadState=new o(!0),c.canUpdate=r.canUpdate("COFROL"),c.canDelete=r.canDelete("COFROL"),p().then(S.bind(null,c.formLoadState))}]),angular.module("cms.roles").controller("RoleListController",["_","shared.LoadState","shared.SearchQuery","shared.urlLibrary","shared.permissionValidationService","roles.roleService",function(n,e,t,o,i,r){var s=this;function a(e){s.isFilterVisible=n.isUndefined(e)?!s.isFilterVisible:e}function l(){a(!1),c()}function c(){return s.gridLoadState.on(),r.getAll(s.query.getParameters()).then(function(e){s.result=e,s.gridLoadState.off()})}s.urlLibrary=o,s.gridLoadState=new e,s.query=new t({onChanged:l}),s.filter=s.query.getFilters(),s.toggleFilter=a,s.canCreate=i.canCreate("COFROL"),s.canUpdate=i.canUpdate("COFROL"),a(!1),c()}]);