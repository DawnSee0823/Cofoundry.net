angular.module("cms.users", ["ngRoute", "cms.shared"]).constant("_", window._).constant("users.modulePath", "/admin/modules/users/js/"); angular.module("cms.users").config(["$routeProvider", "shared.routingUtilities", "users.modulePath", function (n, t, i) { t.registerCrudRoutes(n, i, "User") }]); angular.module("cms.users").controller("AddUserController", ["$location", "_", "shared.stringUtilities", "shared.LoadState", "users.userService", "users.roleService", "users.options", function (n, t, i, r, u, f, e) { function h() { a(); v(); o.globalLoadState = new r; o.editMode = !1; o.userArea = e; o.save = c; o.cancel = l } function c() { o.globalLoadState.on(); u.add(o.command).then(s).finally(o.globalLoadState.off) } function l() { s() } function s() { n.path("/") } function a() { function n(n) { n && (o.roles = n.items, n.items.length === 1 && (o.command.roleId = n.items[0].roleId)) } return f.getSelectionList().then(n) } function v() { o.command = {} } var o = this; h() }]); angular.module("cms.users").controller("UserDetailsController", ["$routeParams", "$location", "$q", "shared.LoadState", "shared.modalDialogService", "users.userService", "users.roleService", "users.modulePath", "users.options", function (n, t, i, r, u, f, e, o, s) { function p() { h.edit = w; h.save = b; h.cancel = k; h.deleteUser = d; h.editMode = !1; h.globalLoadState = new r; h.saveLoadState = new r; h.formLoadState = new r(!0); h.userArea = s; i.all([nt(), l()]).then(a).then(c.bind(null, h.formLoadState)) } function w() { h.editMode = !0; h.mainForm.formStatus.clear() } function b() { y(h.saveLoadState); f.update(h.command).then(g.bind(null, "Changes were saved successfully")).finally(c.bind(null, h.saveLoadState)) } function k() { h.editMode = !1; h.command = v(); h.mainForm.formStatus.clear() } function d() { function t() { return y(), f.remove(h.user.userId).then(tt).catch(c) } var n = { title: "Delete User", message: "Are you sure you want to delete this user?", okButtonTitle: "Yes, delete it", onOk: t }; u.confirm(n) } function g(n) { return l().then(a).then(h.mainForm.formStatus.success.bind(null, n)) } function nt() { function n(n) { n && (h.roles = n.items) } return e.getSelectionList().then(n) } function l() { function i(n) { h.user = n } var t = n.id; return f.getById(t).then(i) } function a() { h.command = v(); h.editMode = !1 } function v() { var n = _.pick(h.user, "userId", "firstName", "lastName", "username", "email"); return h.user.role && (n.roleId = h.user.role.roleId), n } function tt() { t.path("") } function y(n) { h.globalLoadState.on(); n && _.isFunction(n.on) && n.on() } function c(n) { h.globalLoadState.off(); n && _.isFunction(n.off) && n.off() } var h = this; p() }]); angular.module("cms.users").controller("UserListController", ["_", "shared.LoadState", "shared.SearchQuery", "shared.urlLibrary", "users.userService", "users.options", function (n, t, i, r, u, f) { function h() { e.userArea = f; e.urlLibrary = r; e.gridLoadState = new t; e.query = new i({ onChanged: c }); e.filter = e.query.getFilters(); e.toggleFilter = o; o(!1); s() } function o(t) { e.isFilterVisible = n.isUndefined(t) ? !e.isFilterVisible : t } function c() { o(!1); s() } function s() { return e.gridLoadState.on(), u.getAll(e.query.getParameters()).then(function (n) { e.result = n; e.gridLoadState.off() }) } var e = this; h() }]); angular.module("cms.users").factory("users.roleService", ["$http", "shared.serviceBase", "users.options", function (n, t, i) { var r = {}, u = t + "roles"; return r.getSelectionList = function () { return n.get(u, { params: { userAreaCode: i.userAreaCode, excludeAnonymous: !0 } }) }, r }]); angular.module("cms.users").factory("users.userService", ["$http", "shared.serviceBase", "users.options", function (n, t, i) { function f(n) { return u + "/" + n } function e(n) { return n = n || {}, n.userAreaCode = i.userAreaCode, n } var r = {}, u = t + "users"; return r.getAll = function (t) { return t = e(t), n.get(u, { params: t }) }, r.getById = function (t) { return n.get(f(t)) }, r.add = function (t) { return t = e(t), t.generatePassword = !0, n.post(u, t) }, r.update = function (t) { return n.patch(f(t.userId), t) }, r.remove = function (t) { return n.delete(f(t)) }, r }])