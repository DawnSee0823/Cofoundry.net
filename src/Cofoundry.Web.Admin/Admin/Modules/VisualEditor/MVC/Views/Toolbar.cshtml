@inherits CofoundryWebViewPage<IPageResponseData>
@using Cofoundry.Web
@using System.Web.Mvc.Html
@using Cofoundry.Domain
@using Cofoundry.Web.Admin
@using System.Web.Optimization

@functions {
    bool IsEditTypeSwitchRequired(IPageResponseData model)
    {
        return model.PageRoutingInfo.CustomEntityRoute != null
            && model.PageVersion.HasCustomEntityModuleSections
            && model.PageVersion.HasPageModuleSections;
    }

    bool CanEditPage(IPageResponseData model)
    {
        return model.PageVersion.HasCustomEntityModuleSections || model.PageVersion.HasPageModuleSections;
    }
}

@{
    var model = ViewData["model"] as IPageResponseData;
    var isEditing = model.SiteViewerMode == SiteViewerMode.Edit;
    var isViewingSpecificVersion = model.SiteViewerMode == SiteViewerMode.SpecificVersion;
    var isCustomEntityRoute = model.Version is CustomEntityVersionRoute;
    var entityNameSingular = isCustomEntityRoute ? model.CustomEntityDefinition.Name : "Page";
    var isEditTypeSwitchRequired = IsEditTypeSwitchRequired(model);
    var isStaticPage = false; //TODO: Find a way to resolve this

    // If we are on a page with custom entities, it makes more sense to refer to the page as a template
    if (isEditTypeSwitchRequired && !isCustomEntityRoute)
    {
        entityNameSingular = "Template";
    }

    object ngOptions = null;

    if (!isStaticPage)
    {
        ViewBag.Title = model.Version.Title + " - Site Viewer";

        ngOptions = new
        {
            IsInEditMode = isEditing,
            PageId = model.PageRoutingInfo.PageRoute.PageId,
            VersionId = model.Version.VersionId,
            IsCustomEntityRoute = isCustomEntityRoute,
            EntityNameSingular = entityNameSingular,
            EntityId = isCustomEntityRoute ? model.PageRoutingInfo.CustomEntityRoute.CustomEntityId : model.PageRoutingInfo.PageRoute.PageId,
            HasDraftVersion = model.HasDraftVersion
        };
    }

    var backToAdminLink = DashboardRouteLibrary.Urls.Dashboard();
    var versions = new List<IVersionRoute>();

    if (isCustomEntityRoute)
    {
        backToAdminLink = CustomEntitiesRouteLibrary.Urls.Details(model.CustomEntityDefinition, model.PageRoutingInfo.CustomEntityRoute.CustomEntityId);
        versions.AddRange(model.PageRoutingInfo.CustomEntityRoute.Versions);
    }
    else
    {
        versions.AddRange(model.PageRoutingInfo.PageRoute.Versions);
    }

    versions = versions.OrderByDescending(v => v.WorkFlowStatus).ToList();
}

<div id="cofoundry-sv" class="cofoundry-sv active">
    <button type="button" id="cofoundry-sv_button" class="cofoundry-sv__toggle" ng-click="vm.toggleOpen()" ng-bind="vm.siteViewerActive === true ? 'Hide' : 'Show'"></button>

    <div class="cofoundry-sv__navmenu">
        <div class="cofoundry-sv__mini-menu cofoundry-sv__mini-menu--align-left">
            <div class="cofoundry-sv__mini-menu__content">
                <ol class="cofoundry-sv__navmenu-list">
                    <li>
                        <a href="@DashboardRouteLibrary.Urls.Dashboard()" class="cofoundry-sv__navmenu-list__item">
                            <span class="fa fa-chevron-left"></span>
                            Dashboard
                        </a>
                    </li>
                    <li>
                        <a href="~/Admin/pages" class="cofoundry-sv__navmenu-list__item">
                            <span class="fa fa-chevron-left"></span>
                            Pages
                        </a>
                    </li>
                    <li>
                        <a href="~/Admin/directories" class="cofoundry-sv__navmenu-list__item">
                            <span class="fa fa-chevron-left"></span>
                            Directories
                        </a>
                    </li>
                    <li>
                        <a href="~/Admin/images" class="cofoundry-sv__navmenu-list__item">
                            <span class="fa fa-chevron-left"></span>
                            Images
                        </a>
                    </li>
                    <li>
                        <a href="~/Admin/settings" class="cofoundry-sv__navmenu-list__item">
                            <span class="fa fa-chevron-left"></span>
                            Settings
                        </a>
                    </li>
                    @if (CanEditPage(model) && !isViewingSpecificVersion && isCustomEntityRoute)
                    {
                        <li class="cofoundry-sv__navmenu-list__divider">
                            <a href="@backToAdminLink" class="cofoundry-sv__navmenu-list__item">
                                <span class="fa fa-pencil"></span>
                                Edit this @model.CustomEntityDefinition.Name in admin suite
                            </a>
                        </li>
                    }
                </ol>
            </div>

            <button type="button" class="cofoundry-sv__mini-menu__toggle">
                <img src="~/Admin/Modules/VisualEditor/Content/img/logo-thumb.png" />
            </button>
        </div>
    </div>

    <div class="cofoundry-sv__page-details">
        <div class="cofoundry-sv__mini-menu cofoundry-sv__mini-menu--flow">
            @if (versions.Any())
            {
                var count = 1;

                <div class="cofoundry-sv__mini-menu__content">
                    <h3>@entityNameSingular Versions</h3>
                    <ol class="cofoundry-sv__version-list">
                        @foreach (var version in versions)
                        {
                            var link = "?version=" + version.VersionId;
                            if (version.WorkFlowStatus == WorkFlowStatus.Draft || version.WorkFlowStatus == WorkFlowStatus.Published)
                            {
                                link = "?mode=" + (version.WorkFlowStatus == WorkFlowStatus.Published ? "live" : "preview");
                            }
                            link += "&edittype=" + (isCustomEntityRoute ? "entity" : "page");

                            <li>
                                <a href="@link" class="cofoundry-sv__version-list__item @Cofoundry.Html.TextIf(version == model.Version, "active")">
                                    <span class="@version.WorkFlowStatus.ToString().ToLower()"></span>
                                    @("V" + count), Created on @version.CreateDate
                                </a>
                            </li>

                            count++;
                        }
                    </ol>

                </div>
            }
            <button type="button" class="cofoundry-sv__mini-menu__toggle">
                <span class="cofoundry-sv__page-details__status @model.Version.WorkFlowStatus.ToString().ToLower()"></span>
                <span class="cofoundry-sv__page-details__name">@model.Version.Title</span>
                @if (Request.Url.AbsolutePath.Length > 1)
                {
                    <span class="cofoundry-sv__page-details__url">@Request.Url.AbsolutePath</span>
                }
            </button>
        </div>
    </div>
    @*
    <div class="cofoundry-sv__settings">
        <div class="cofoundry-sv__mini-menu cofoundry-sv__mini-menu--large cofoundry-sv__mini-menu--align-right">
            <div class="cofoundry-sv__mini-menu__content">
                <!-- <h3>Edit Mode Options</h3>
                <div class="cofoundry-sv__edit-mode">
                    <div class="cofoundry-sv__edit-mode__half">
                        <input id="toggle-show-editable" type="checkbox">
                        <label for="toggle-show-editable">Always show editable areas</label>
                    </div>

                    <div class="cofoundry-sv__edit-mode__half">
                        <input id="show-editable-color" type="color"
                               value="#47FEF2" disabled>
                        <label for="show-editable-color">Outline Color</label>
                    </div>
                </div> -->

                <h3>Display Size</h3>
                <div class="cofoundry-sv__tabs">
                    <div class="cofoundry-sv__tab-content active">
                        <ul id="display-list" class="cofoundry-sv__version-list">
                            <li id="display-full" class="cofoundry-sv__version-list__item active" ng-click="vm.switchDisplaySize($event, 'full')">Full Screen</li>
                            <li id="display-iPadLandscape" class="cofoundry-sv__version-list__item" ng-click="vm.switchDisplaySize($event, 'iPadLandscape')">Tablet Landscape <span>1024px wide</span></li>
                            <li id="display-iPadPortrait" class="cofoundry-sv__version-list__item" ng-click="vm.switchDisplaySize($event, 'iPadPortrait')">Tablet Portrait <span>768px wide</span></li>
                            <li id="display-iPhonePortrait" class="cofoundry-sv__version-list__item" ng-click="vm.switchDisplaySize($event, 'iPhonePortrait')">Mobile <span>375px wide</span></li>
                        </ul>
                    </div>
                </div>
            </div>

            <button type="button" class="cofoundry-sv__mini-menu__toggle">
                <span class="fa fa-desktop"></span>
            </button>
        </div>
    </div>
    *@
    <div class="cofoundry-sv__mode">
        @if (!isStaticPage && !isViewingSpecificVersion)
        {
            <a href="?mode=live" class="cofoundry-sv__mode__button @Cofoundry.Html.TextIf(model.Version.WorkFlowStatus == WorkFlowStatus.Published, "active")">
                <span class="fa fa-cloud"></span>
                Current<br />live
            </a>

            if (CanEditPage(model))
            {
                if (isEditTypeSwitchRequired)
                {
                    <span class="cofoundry-sv__mode__button__group">
                        <a href="?mode=edit&edittype=entity" class="cofoundry-sv__mode__button @Cofoundry.Html.TextIf(isCustomEntityRoute && isEditing, "active")">
                            <span class="fa fa-pencil-square-o"></span>
                            Edit<br />@model.CustomEntityDefinition.Name
                        </a>
                        <a href="?mode=edit&edittype=page" class="cofoundry-sv__mode__button @Cofoundry.Html.TextIf(!isCustomEntityRoute && isEditing, "active")">
                            <span class="fa fa-pencil-square-o"></span>
                            Edit<br />@(isEditTypeSwitchRequired ? "template" : "draft")
                        </a>
                    </span>
                }
                else
                {
                    <a href="?mode=edit&edittype=page" class="cofoundry-sv__mode__button @Cofoundry.Html.TextIf(!isCustomEntityRoute && isEditing, "active")">
                        <span class="fa fa-pencil-square-o"></span>
                        Edit<br />@(isEditTypeSwitchRequired ? "template" : "draft")
                    </a>
                }
                <a href="?mode=preview" class="cofoundry-sv__mode__button @Cofoundry.Html.TextIf(!isEditing && model.Version.WorkFlowStatus == WorkFlowStatus.Draft, "active")">
                    <span class="fa fa-eye"></span>
                    Preview<br />draft
                </a>
            }
        }
        <div class="cofoundry-sv__options">

        </div>
    </div>
</div>